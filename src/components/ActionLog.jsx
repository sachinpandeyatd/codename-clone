import React, { useEffect, useRef } from 'react';

// Helper to format timestamp (optional, basic example)
function formatTimestamp(timestamp) {
    if (!timestamp) return '';
    // Firebase server timestamp is milliseconds since epoch
    try {
        return new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    } catch (e) {
        return ''; // Handle potential invalid timestamps
    }
}

function ActionLog({ logEntries = [] }) { // Default to empty array
    const endOfLogRef = useRef(null);

    // Auto-scroll to bottom when logEntries change
    useEffect(() => {
        endOfLogRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [logEntries]); // Dependency on the logEntries array

    // Ensure logEntries is an array before trying to map
    const entriesArray = Array.isArray(logEntries) ? logEntries : Object.values(logEntries || {});

    // Sort entries by timestamp just in case Firebase order isn't guaranteed or changes
    // (Firebase RTDB keys generated by push() *should* maintain order, but client-side sort is safer)
    const sortedEntries = [...entriesArray].sort((a, b) => (a?.timestamp || 0) - (b?.timestamp || 0));


    return (
        <div className="h-full flex flex-col bg-gray-100 border border-gray-300 rounded shadow-inner">
            <h3 className="text-lg font-semibold p-2 border-b bg-gray-200 text-gray-700 sticky top-0">
                Game Log
            </h3>
            <ul className="flex-grow overflow-y-auto p-2 space-y-1 text-sm">
                {sortedEntries.length === 0 && (
                    <li className="text-gray-500 italic text-center p-4">No actions yet...</li>
                )}
                {sortedEntries.map((entry, index) => (
                    <li
                        key={entry.key || index} // Use Firebase key if available, else index
                        className={`p-1.5 rounded ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}`}
                    >
                        <span className="text-gray-500 mr-2 font-mono text-xs">
                            [{formatTimestamp(entry.timestamp)}]
                        </span>
                        <span>{entry.text}</span>
                    </li>
                ))}
                {/* Invisible element to scroll to */}
                <li ref={endOfLogRef} style={{ height: '1px' }} />
            </ul>
        </div>
    );
}

export default ActionLog;